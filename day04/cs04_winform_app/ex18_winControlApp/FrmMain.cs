namespace ex18_winControlApp
{
    public partial class FrmMain : Form
    {
        Random rand = new Random();     // 트리뷰 노드 이름으로 사용할 랜덤값
        public FrmMain()
        {
            InitializeComponent();      // 디자이너에서 정의한 화면구성 초기화

            LsvDummy.Columns.Add("이름");
            LsvDummy.Columns.Add("깊이");
        }

        private void FrmMain_Load(object sender, EventArgs e)
        {
            var Fonts = FontFamily.Families;    // 현재 os내에 설치된 폰트를 다 가져와!
            foreach (var font in Fonts)
            {
                CboFonts.Items.Add(font.Name);
            }
        }

        // 글자체, 볼드, 이탤릭으로 변경하는 메서드
        void ChangeFont()
        {
            if (CboFonts.SelectedIndex < 0) // 아무것도 선택 안 됨
                return;

            FontStyle style = FontStyle.Regular;    // 일반 글자(볼드X, 이탤릭X)로 초기화

            if (ChkBold.Checked)    // [굵게] 체크박스를 체크하면
                style |= FontStyle.Bold;

            if (ChkItalic.Checked)  // [이탤릭] 체크박스를 체크하면
                style |= FontStyle.Italic;

            TxTSampleText.Font = new Font((string)CboFonts.SelectedItem, 12, style);

        }

        void TreeToList()
        {
            LsvDummy.Items.Clear();
            foreach (TreeNode node in TrvDummy.Nodes)
            {
                TreeToList(node);
            }
        }

        private void TreeToList(TreeNode node)
        {
            //throw new NotImplementedException();
            LsvDummy.Items.Add(     // 리스트뷰에 아이템 추가
                new ListViewItem(
                    new string[] { node.Text, node.FullPath.Count(f => f == '\\').ToString() }
                    )
                );

            foreach (TreeNode subNode in node.Nodes)
            {
                TreeToList(subNode);
            }
        }

        private void CboFonts_SelectedIndexChanged(object sender, EventArgs e)
        {
            ChangeFont();
        }

        private void ChkBold_CheckedChanged(object sender, EventArgs e)
        {
            ChangeFont();
        }

        private void ChkItalic_CheckedChanged(object sender, EventArgs e)
        {
            ChangeFont();
        }

        // 트랙바 스크롤 이벤트핸들러
        private void TrbDummy_Scroll(object sender, EventArgs e)
        {
            PrgDummy.Value = TrbDummy.Value;    // 트랙바 포인터를 옮기면 프로그레스바 값도 같이 변경

        }

        private void BtnModal_Click(object sender, EventArgs e)
        {
            Form FrmModel = new Form();
            FrmModel.Text = "모달창";
            FrmModel.Width = 300;
            FrmModel.Height = 100;
            FrmModel.BackColor = Color.Red;
            FrmModel.ShowDialog();  // 모달창 띄우기
        }

        private void BtnModaless_Click(object sender, EventArgs e)
        {
            Form FrmModeless = new Form();
            FrmModeless.Text = "모달리스창";
            FrmModeless.Width = 300;
            FrmModeless.Height = 100;
            FrmModeless.BackColor = Color.Green;
            FrmModeless.Show();  // 모달창 띄우기
        }

        private void BtnMsgBox_Click(object sender, EventArgs e)
        {
            // 기본적인 메시지박스 사용법
            MessageBox.Show(TxTSampleText.Text, "메시지 박스", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }

        private void BtnQuestion_Click(object sender, EventArgs e)
        {
            var res = MessageBox.Show("좋아요?", "질문", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
            {
                MessageBox.Show("네 좋아요!");
            }
            else if (res == DialogResult.No)
            {
                MessageBox.Show("아뇨 싫어요!");
            }
        }

        // 윈도우 종료버튼을 클릭했을 때 발생하는 이벤트핸들러
        private void FrmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            var res = MessageBox.Show("정말 종료하시겠습니까?", "종료 여부", MessageBoxButtons.YesNo
                                       , MessageBoxIcon.Question);
            if (res == DialogResult.No)
                e.Cancel = true;
        }

        private void BtnAddRoot_Click(object sender, EventArgs e)
        {
            TrvDummy.Nodes.Add(rand.Next().ToString());
            TreeToList();
        }

        private void BtnAddChild_Click(object sender, EventArgs e)
        {
            if (TrvDummy.SelectedNode == null)
            { // 부모 노드를 선택하지 않으면
                MessageBox.Show("선택한 노드가 없음", "경고", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;     // 더 이상 진행없이 메서드 종료
            }
            TrvDummy.SelectedNode.Nodes.Add(rand.Next().ToString());
            TrvDummy.SelectedNode.Expand();
            TreeToList();   // 리스트뷰를 다시 그려준다.
        }

        private void BtnLoad_Click(object sender, EventArgs e)
        {
            DlgOpenImage.Title = "이미지 열기";
            // Filter는 확장자를 이미지로만 한정
            DlgOpenImage.Filter = "Image Files(*.bmp; *.jpg; *.png)|(*.bmp; *.jpg; *.png)";
            var res = DlgOpenImage.ShowDialog(this);
            if (res == DialogResult.OK)
            {
                //MessageBox.Show(DlgOpenImage.FileName.ToString());
                PicNormal.Image = Bitmap.FromFile(DlgOpenImage.FileName);
            }
        }

        private void PicNormal_Click(object sender, EventArgs e)
        {
            if (PicNormal.SizeMode == PictureBoxSizeMode.Normal)
            {
                PicNormal.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            else
            {
                PicNormal.SizeMode = PictureBoxSizeMode.Normal;
            }
        }
    }
}
